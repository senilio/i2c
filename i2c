#!/usr/bin/env python
import sys
import subprocess
import argparse

def main():

	# Parse command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', metavar='port', type=int, help='Optional: Connect to this SSH port. Defalts to port 22.', required=False)
    parser.add_argument('-l', metavar='login', type=str, help='Optional: Connect as this SSH user. Defaults to current user.', required=False)
    parser.add_argument('-d', help='Enable debug output', action='store_true', required=False, default=False)
    parser.add_argument('servers', nargs=argparse.REMAINDER)
    args = parser.parse_args()

    # Decide number of rows and columns in the iTerm2 window
    if len(args.servers) % 2 == 0:
        rows=len(args.servers)/2
        columns=len(args.servers)/2
        even=1
    else:
        rows=len(args.servers)/2+1
        columns=len(args.servers)/2+1
        even=0

    # Print help if there's no arguments
    if len(args.servers) == 0:
        parser.print_help()
        sys.exit()

    # Compile SSH arguments string
    ssh_opts=''
    if not args.l == None:
        ssh_opts = ' '.join(['-l {}', ssh_opts]).format(args.l)
    if not args.p == None:
        ssh_opts = ' '.join(['-p {}', ssh_opts]).format(args.p)

    # Start compiling the applescript
    ascript  = 'tell application "iTerm2"\n'
    ascript += '  tell current window\n'
    ascript += '    create window with default profile\n'
    ascript += '  end tell\n'
    ascript += '  set p1 to (current session of current window)\n'

    # Used for printing the number of horizontal panes
    index=1

    # Create the horizontal panes
    for i in range(1, rows):
        ascript += '  tell p{}\n'.format(index)
        ascript += '    set p{} to (split horizontally with same profile)\n'.format(index+1)
        ascript += '  end tell\n'
        index+=1

    # Create the vertical panes
    for i in range(1, columns+even):
        ascript += '  tell p{}\n'.format(i)
        ascript += '    set p{} to (split vertically with same profile)\n'.format(i+columns)
        ascript += '  end tell\n'

    # Insert text into each pane
    for i in range(0, len(args.servers)):
        ascript += '  tell p{}\n'.format(i+1)
        ascript += '    write text "unset HISTFILE && ssh {}{}"\n'.format(ssh_opts, args.servers[i])
        ascript += '  end tell\n'

    # Enable broadcast
    ascript += '  tell application "System Events"\n'
    ascript += '    keystroke "i" using {command down, option down}\n'
    ascript += '  end tell\n'

    # Close the script
    ascript += 'end tell'

    # Display applescript if debug mode is enabled
    if args.d:
        print(ascript)

    # Execute applescript
    subprocess.call(['osascript', '-e', ascript])

if __name__ == '__main__':
    main()
